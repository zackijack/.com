version: 2

references:
  workspace_root: &workspace_root
    ~/workspace

  working_directory: &working_directory
    ~/workspace/code

  persist_to_workspace: &persist_to_workspace
    persist_to_workspace:
      root: *workspace_root
      paths:
        - code

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  node_container: &node_container
    docker:
      - image: circleci/node:10.13.0-stretch
    working_directory: *working_directory

jobs:
  install:
    <<: *node_container
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Cache
          keys:
            - v1-yarn-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v1-yarn-{{ arch }}-{{ .Branch }}-
            - v1-yarn-{{ arch }}-
      - restore_cache:
          name: Restore node_modules Cache
          keys:
            - v1-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v1-node-{{ arch }}-{{ .Branch }}-
            - v1-node-{{ arch }}-
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          name: Save Yarn Cache
          key: v1-yarn-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          name: Save node_modules Cache
          key: v1-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - *persist_to_workspace

  build:
    <<: *node_container
    steps:
      - *attach_workspace
      - run:
          name: Build
          command: yarn build
      - *persist_to_workspace

  deploy:
    docker:
      - image: circleci/python:3.7.1-stretch
    working_directory: *working_directory
    steps:
      - *attach_workspace
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli
      - run:
          name: Deploy to AWS S3
          command: aws s3 sync --acl public-read --cache-control max-age=86400 --delete dist/ s3://$AWS_S3_BUCKET_NAME
      - run:
          name: Create Invalidation in AWS CloudFront
          command: aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths '/*'

workflows:
  version: 2
  install-build-deploy:
    jobs:
      - install
      - build:
          requires:
            - install
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
